/*
Name: Eranus Christian Thompson
Date: 1-17-2017
Description: The program creates a Pokemon Go Go that access Pokemon stop
locations and Pokemon near every current location. Using vectors,
the program stores the location of the the Pokemon stops. It determines
the order to visit all Pokemon stops (using next_permutation) to
minimize the totsl distance traveled. The program returns to the
starting location (0,0) after one of each Pokemon is caught. The input
contains the list of Pokeman stops(North and East of the starting point)
and the order in which to visit the stops to minimize distance traveled.
The output displays a single line of integers representing the order of
the stops visited (the minimize total distance traveled followed by the
total distance traveled in blocks.
*/

#include <iostream>
#include <string>
#include <vector>
#include <cmath>
#include <algorithm>

using namespace std;


struct Pokemon {

	int xloc, yloc, index = 0;
	string pocMon;
};

void strPoc(int maxPoc, vector<Pokemon>& pocStre);
void uniPoke(vector<vector<int>>& indxPoke, const vector<Pokemon>& store);
bool pocNext(vector<int>& store, vector<vector<int>>& indx);
int chkDup(int temp, const vector<int>& pokeIndx);
void pocComb(const vector<int> store, vector<vector<int>> indx);

int main() {

	int pocStops;
	
	vector<Pokemon> pocLoc;  
	vector<vector<int>> pocStre;	
	vector<int> index;

	cin >> pocStops;
	strPoc(pocStops, pocLoc);	  //Reads and store vec locations
	uniPoke(pocStre, pocLoc);    								  

	for (int i = 0; i < pocStre.size(); i++) {	//stores indexes of pokemon
		index.push_back(pocStre[i][0]);
	}

	pocComb(index, pocStre);	//prints out combinations of indexes
	
	return 0;
}

void strPoc(int maxPoc, vector<Pokemon>& pocStre) {

	pocStre.resize(maxPoc+1);
	pocStre[0].xloc = 0;
	pocStre[0].yloc = 0;
	pocStre[0].pocMon = "";

	for (int i = 1; i < maxPoc+1; i++) {
		cin >> pocStre[i].xloc >> pocStre[i].yloc
			>> pocStre[i].pocMon;
			//pocStre[i].index++;
	}

}

void uniPoke(vector<vector<int>>& indxPoke, const vector<Pokemon>& store) {

	vector <int> temp(1, 0);
	string name;
	bool isThere;

	indxPoke.push_back(temp);
	for (int i = 1; i < store.size(); i++) {
		name = store[i].pocMon;
		isThere = false;
		for (int j = 0; j < indxPoke.size() && !isThere; j++) 
			if (name == store[indxPoke[j][0]].pocMon) {
				isThere = true;
				indxPoke[j].push_back(i);				
			}
			if(!isThere) {
				temp[0] = i;
				indxPoke.push_back(temp);				
			}		
	}	
}

void pocComb(vector<int> store, vector<vector<int>> indx) {
	
	do {
		for (int i = 1; i < store.size(); i++)
			cout << store[i] << " ";
		cout << endl;
	} while (pocNext(store, indx));
}

bool pocNext(vector<int>& store, vector<vector<int>>& indx) {	

	int pocNum;
	bool done = false;
	
	for (int i = 1; i < indx.size() && !done; i++) {
		pocNum = chkDup(store[i], indx[i]);
		if (pocNum < indx[i].size() -1) {
			store[i] = indx[i][++pocNum];
			return true;
		}
		else if(pocNum == indx[i].size() - 1) {					
			store[i] = indx[i][0];			
		}
	}
	return done;
}

int chkDup(int temp, const vector<int>& pokeIndx) {

	for (int i = 0; i < pokeIndx.size(); i++) 
		if (temp == pokeIndx[i])
			return i;
		return -1;
}


void pocDist(vector<vector<int>>& pocMon, vector<Pokemon>pocLoc) {

int var1, var2;
int total, bestTotal, start = 0;
vector<int>distance;

	do {
		var1 = pocLoc[start].xloc - start;
		var2 = pocLoc[start].yloc - start;
		total = var1 + var2;
		distance.push_back(total);

		for (int i = 1; i < pocLoc.size(); i++) {
			var1 = pocLoc[i].xloc - pocLoc[i - 1].xloc;
			var2 = pocLoc[start].yloc - pocLoc[i - 1].yloc;
			total += var1 + var2;
			distance.push_back(total); //push_back indexes not total
		}

		if (total < bestTotal) {
			bestTotal = total;
			//have another vector_int that holds the 
		}
	} while (next_permutation(distance.begin(), distance.end()));
}

5
5 9 E
50 50 F
1 1 F
1 8 J
2 8 U


//Part2

/*
Name: Eranus Christian Thompson
Date: 1-17-2017
Description: The program creates a Pokemon Go Go that access Pokemon stop
locations and Pokemon near every current location. Using vectors,
the program stores the location of the the Pokemon stops. It determines
the order to visit all Pokemon stops (using next_permutation) to
minimize the totsl distance traveled. The program returns to the
starting location (0,0) after one of each Pokemon is caught. The input
contains the list of Pokeman stops(North and East of the starting point)
and the order in which to visit the stops to minimize distance traveled.
The output displays a single line of integers representing the order of
the stops visited (the minimize total distance traveled followed by the
total distance traveled in blocks.
*/

#include <iostream>
#include <string>
#include <vector>
#include <cmath>
#include <algorithm>

using namespace std;


struct Pokemon {

	int xloc, yloc, index = 0;
	string pocMon;
};

void strPoc(int maxPoc, vector<Pokemon>& pocStre);
void uniPoke(vector<vector<int>>& indxPoke, const vector<Pokemon>& store);
bool pocNext(vector<int>& store, vector<vector<int>>& indx);
int chkDup(int temp, const vector<int>& pokeIndx);
void pocComb(const vector<int> store, vector<vector<int>> indx, vector<Pokemon> poke);
int pocDist(vector<int>& pocMon, vector<int>& bestDist, vector<Pokemon>pocLoc);

int main() {

	int pocStops;

	vector<Pokemon> pocLoc;
	vector<vector<int>> pocStre;
	vector<int> index;

	cin >> pocStops;
	strPoc(pocStops, pocLoc);	  //Reads and store vec locations
	uniPoke(pocStre, pocLoc);

	for (int i = 0; i < pocStre.size(); i++) {	//stores indexes of pokemon
		index.push_back(pocStre[i][0]);
	}

	pocComb(index, pocStre, pocLoc);	//prints out combinations of indexes
	
	/*vector<int> store;
	store.push_back(1);
	store.push_back(2);
	store.push_back(4);
	store.push_back(5);
	do {
		for (int i = 0; i < store.size(); i++)
			cout << store[i] << " ";
		cout << endl;
	} while (next_permutation(store.begin(), store.end()));*/
	return 0;
}

void strPoc(int maxPoc, vector<Pokemon>& pocStre) {

	pocStre.resize(maxPoc + 1);
	pocStre[0].xloc = 0;
	pocStre[0].yloc = 0;
	pocStre[0].pocMon = "";

	for (int i = 1; i < maxPoc + 1; i++) {
		cin >> pocStre[i].xloc >> pocStre[i].yloc
			>> pocStre[i].pocMon;
		pocStre[i].index++;
	}

}

void uniPoke(vector<vector<int>>& indxPoke, const vector<Pokemon>& store) {

	vector <int> temp(1, 0);
	string name;
	bool isThere;

	indxPoke.push_back(temp);
	for (int i = 1; i < store.size(); i++) {
		name = store[i].pocMon;
		isThere = false;
		for (int j = 0; j < indxPoke.size() && !isThere; j++)
			if (name == store[indxPoke[j][0]].pocMon) {
				isThere = true;
				indxPoke[j].push_back(i);
			}
		if (!isThere) {
			temp[0] = i;
			indxPoke.push_back(temp);
		}
	}
}

void pocComb(vector<int> store, vector<vector<int>> indx, vector<Pokemon> poke) {

	vector <int> finDist, realDist;
	finDist.resize(0);
	realDist.resize(0);

	int bestDist = INT_MAX;
	int x;

	do {		
			x = pocDist(store, finDist, poke);
			if (x < bestDist) {
				bestDist = x;
				for (int i = 0; i < finDist.size(); i++) {
					realDist.push_back(finDist[i]);
				}
			}			
	} while (pocNext(store, indx));
	////for (int i = 1; i < store.size(); i++)
	////	cout << store[i] << " ";
	////cout << endl;
	cout << bestDist << endl;
}

bool pocNext(vector<int>& store, vector<vector<int>>& indx) {

	int pocNum;
	bool done = false;

	for (int i = 1; i < indx.size() && !done; i++) {
		pocNum = chkDup(store[i], indx[i]);
		if (pocNum < indx[i].size() - 1) {
			store[i] = indx[i][++pocNum];
			return true;
		}
		else if (pocNum == indx[i].size() - 1) {
			store[i] = indx[i][0];
		}
	}
	return done;
}

int chkDup(int temp, const vector<int>& pokeIndx) {

	for (int i = 0; i < pokeIndx.size(); i++)
		if (temp == pokeIndx[i])
			return i;
	return -1;
}


int pocDist(vector<int>& pocMon, vector<int>& bestDist, vector<Pokemon>pocLoc) {

	int var1, var2;
	int total, bestTotal = INT_MAX, start = 0;
	vector<int>distance;
	distance.resize(0);

	do {
		var1 = abs(pocLoc[start].xloc - start);
		var2 = abs(pocLoc[start].yloc - start);
		total = var1 + var2;
		distance.push_back(pocMon[start]);

		for (int i = 1; i < pocMon.size(); i++) {	//changed from pocLoc size
													//to pocMon size
			var1 = abs(pocLoc[pocMon[i]].xloc - pocLoc[pocMon[i - 1]].xloc);
			var2 = abs(pocLoc[pocMon[i]].yloc - pocLoc[pocMon[i - 1]].yloc);
			//was calculating the location at pocLoc[i] 
			//rather than the location at store[i]
			total += var1 + var2;
			if (i + 1 == pocMon.size()) {
				var1 = abs(pocLoc[pocMon[i]].xloc - start);
				var2 = abs(pocLoc[pocMon[i]].yloc - start);
				total += var1 + var2;
			}
			distance.push_back(pocMon[i]); //push_back indexes not total
											// changed from pocMon[i-1]
										   // to pocMon[i]
		}

		if (total < bestTotal) {
			bestTotal = total;
			//bestDist.resize(0);
			for (int i = 0; i < distance.size(); i++) {
				bestDist.push_back(distance[i]);
			}
			//have another vector_int that holds the 
			
		}
		total = start;
		distance.resize(start);
	} while (next_permutation(pocMon.begin(), pocMon.end()));

	return bestTotal;
}

//Part3

/*
Name: Eranus Christian Thompson
Date: 1-17-2017
Description: The program creates a Pokemon Go Go that access Pokemon stop
locations and Pokemon near every current location. Using vectors,
the program stores the location of the the Pokemon stops. It determines
the order to visit all Pokemon stops (using next_permutation) to
minimize the totsl distance traveled. The program returns to the
starting location (0,0) after one of each Pokemon is caught. The input
contains the list of Pokeman stops(North and East of the starting point)
and the order in which to visit the stops to minimize distance traveled.
The output displays a single line of integers representing the order of
the stops visited (the minimize total distance traveled followed by the
total distance traveled in blocks.
*/

#include <iostream>
#include <string>
#include <vector>
#include <cmath>
#include <algorithm>

using namespace std;


struct Pokemon {

	int xloc, yloc, index = 0;
	string pocMon;
};

void strPoc(int maxPoc, vector<Pokemon>& pocStre);
void uniPoke(vector<vector<int>>& indxPoke, const vector<Pokemon>& store);
bool pocNext(vector<int>& store, vector<vector<int>>& indx);
int chkDup(int temp, const vector<int>& pokeIndx);
void pocComb(const vector<int> store, vector<vector<int>> indx, vector<Pokemon> poke);
int pocDist(vector<int>& pocMon, vector<int>& bestDist, vector<Pokemon>pocLoc);

int main() {

	int pocStops;

	vector<Pokemon> pocLoc;
	vector<vector<int>> pocStre;
	vector<int> index;

	cin >> pocStops;
	strPoc(pocStops, pocLoc);	  //Reads and store vec locations
	uniPoke(pocStre, pocLoc);

	for (int i = 0; i < pocStre.size(); i++) {	//stores indexes of pokemon
		index.push_back(pocStre[i][0]);
	}

	pocComb(index, pocStre, pocLoc);	//prints out combinations of indexes
	
	//vector<int> store;
	//store.push_back(1);
	//store.push_back(3);
	//store.push_back(4);
	//store.push_back(5);
	//do {
	//	for (int i = 0; i < store.size(); i++)
	//		cout << store[i] << " ";
	//	cout << endl;
	//} while (next_permutation(store.begin(), store.end()));
	return 0;
}

void strPoc(int maxPoc, vector<Pokemon>& pocStre) {

	pocStre.resize(maxPoc + 1);
	pocStre[0].xloc = 0;
	pocStre[0].yloc = 0;
	pocStre[0].pocMon = "";

	for (int i = 1; i < maxPoc + 1; i++) {
		cin >> pocStre[i].xloc >> pocStre[i].yloc
			>> pocStre[i].pocMon;
		pocStre[i].index++;
	}

}

void uniPoke(vector<vector<int>>& indxPoke, const vector<Pokemon>& store) {

	vector <int> temp(1, 0);
	string name;
	bool isThere;

	indxPoke.push_back(temp);
	for (int i = 1; i < store.size(); i++) {
		name = store[i].pocMon;
		isThere = false;
		for (int j = 0; j < indxPoke.size() && !isThere; j++)
			if (name == store[indxPoke[j][0]].pocMon) {
				isThere = true;
				indxPoke[j].push_back(i);
			}
		if (!isThere) {
			temp[0] = i;
			indxPoke.push_back(temp);
		}
	}
}

void pocComb(vector<int> store, vector<vector<int>> indx, vector<Pokemon> poke) {

	vector <int> finDist, realDist;
	finDist.resize(0);
	realDist.resize(0);

	int bestDist = INT_MAX;
	int x;

	do {		
			x = pocDist(store, finDist, poke);
			if (x < bestDist) {
				bestDist = x;
				for (int i = 0; i < finDist.size(); i++) {
					realDist.push_back(finDist[i]);
				}
			}			
	} while (pocNext(store, indx));
	////for (int i = 1; i < store.size(); i++)
	////	cout << store[i] << " ";
	////cout << endl;
	cout << bestDist << endl;
}

bool pocNext(vector<int>& store, vector<vector<int>>& indx) {

	int pocNum;
	bool done = false;

	for (int i = 1; i < indx.size() && !done; i++) {
		pocNum = chkDup(store[i], indx[i]);
		if (pocNum < indx[i].size() - 1) {
			store[i] = indx[i][++pocNum];
			return true;
		}
		else if (pocNum == indx[i].size() - 1) {
			store[i] = indx[i][0];
		}
	}
	return done;
}

int chkDup(int temp, const vector<int>& pokeIndx) {

	for (int i = 0; i < pokeIndx.size(); i++)
		if (temp == pokeIndx[i])
			return i;
	return -1;
}


int pocDist(vector<int>& pocMon, vector<int>& bestDist, vector<Pokemon>pocLoc) {

	int var1, var2;
	int total, bestTotal = INT_MAX, start = 0;
	vector<int>distance;
	distance.resize(0);

	do {
		var1 = abs(pocLoc[start].xloc - start);
		var2 = abs(pocLoc[start].yloc - start);
		total = var1 + var2;
		distance.push_back(pocMon[start]);

		for (int i = 1; i < pocMon.size(); i++) {	
			var1 = abs(pocLoc[pocMon[i]].xloc - pocLoc[pocMon[i - 1]].xloc);
			var2 = abs(pocLoc[pocMon[i]].yloc - pocLoc[pocMon[i - 1]].yloc);			
			total += var1 + var2;
			if (i + 1 == pocMon.size()) {
				var1 = abs(pocLoc[pocMon[i]].xloc - start);
				var2 = abs(pocLoc[pocMon[i]].yloc - start);
				total += var1 + var2;
			}
			distance.push_back(pocMon[i]); 
		}

		if (total < bestTotal) {
			bestTotal = total;
			bestDist.resize(0);
			for (int i = 0; i < distance.size(); i++) {
				bestDist.push_back(distance[i]);
			}		
		}
		total = start;
		distance.resize(start);
	} while (next_permutation(pocMon.begin(), pocMon.end()));

	return bestTotal;
}


